{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ebbe6b3a-a637-4445-a2bf-9d21d41d8ad7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import neccessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "be683669-a4a6-4c97-a38e-97a97a3efa51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "ddata = pd.read_csv('accid_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1cfcc294-d1a4-4eca-bf77-88ec7bcb624d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Age_band_of_driver</th>\n",
       "      <th>Sex_of_driver</th>\n",
       "      <th>Educational_level</th>\n",
       "      <th>Vehicle_driver_relation</th>\n",
       "      <th>Driving_experience</th>\n",
       "      <th>Type_of_vehicle</th>\n",
       "      <th>Owner_of_vehicle</th>\n",
       "      <th>Service_year_of_vehicle</th>\n",
       "      <th>...</th>\n",
       "      <th>Vehicle_movement</th>\n",
       "      <th>Casualty_class</th>\n",
       "      <th>Sex_of_casualty</th>\n",
       "      <th>Age_band_of_casualty</th>\n",
       "      <th>Casualty_severity</th>\n",
       "      <th>Work_of_casuality</th>\n",
       "      <th>Fitness_of_casuality</th>\n",
       "      <th>Pedestrian_movement</th>\n",
       "      <th>Cause_of_accident</th>\n",
       "      <th>Accident_severity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17:02:00</td>\n",
       "      <td>Monday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Above high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>1-2yr</td>\n",
       "      <td>Automobile</td>\n",
       "      <td>Owner</td>\n",
       "      <td>Above 10yr</td>\n",
       "      <td>...</td>\n",
       "      <td>Going straight</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Moving Backward</td>\n",
       "      <td>Slight Injury</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17:02:00</td>\n",
       "      <td>Monday</td>\n",
       "      <td>31-50</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>Above 10yr</td>\n",
       "      <td>Public (&gt; 45 seats)</td>\n",
       "      <td>Owner</td>\n",
       "      <td>5-10yrs</td>\n",
       "      <td>...</td>\n",
       "      <td>Going straight</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Overtaking</td>\n",
       "      <td>Slight Injury</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17:02:00</td>\n",
       "      <td>Monday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>1-2yr</td>\n",
       "      <td>Lorry (41?100Q)</td>\n",
       "      <td>Owner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Going straight</td>\n",
       "      <td>Driver or rider</td>\n",
       "      <td>Male</td>\n",
       "      <td>31-50</td>\n",
       "      <td>3</td>\n",
       "      <td>Driver</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Changing lane to the left</td>\n",
       "      <td>Serious Injury</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1:06:00</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>5-10yr</td>\n",
       "      <td>Public (&gt; 45 seats)</td>\n",
       "      <td>Governmental</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Going straight</td>\n",
       "      <td>Pedestrian</td>\n",
       "      <td>Female</td>\n",
       "      <td>18-30</td>\n",
       "      <td>3</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Changing lane to the right</td>\n",
       "      <td>Slight Injury</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1:06:00</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>2-5yr</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Owner</td>\n",
       "      <td>5-10yrs</td>\n",
       "      <td>...</td>\n",
       "      <td>Going straight</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Overtaking</td>\n",
       "      <td>Slight Injury</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Time Day_of_week Age_band_of_driver Sex_of_driver   Educational_level  \\\n",
       "0  17:02:00      Monday              18-30          Male   Above high school   \n",
       "1  17:02:00      Monday              31-50          Male  Junior high school   \n",
       "2  17:02:00      Monday              18-30          Male  Junior high school   \n",
       "3   1:06:00      Sunday              18-30          Male  Junior high school   \n",
       "4   1:06:00      Sunday              18-30          Male  Junior high school   \n",
       "\n",
       "  Vehicle_driver_relation Driving_experience      Type_of_vehicle  \\\n",
       "0                Employee              1-2yr           Automobile   \n",
       "1                Employee         Above 10yr  Public (> 45 seats)   \n",
       "2                Employee              1-2yr      Lorry (41?100Q)   \n",
       "3                Employee             5-10yr  Public (> 45 seats)   \n",
       "4                Employee              2-5yr                  NaN   \n",
       "\n",
       "  Owner_of_vehicle Service_year_of_vehicle  ... Vehicle_movement  \\\n",
       "0            Owner              Above 10yr  ...   Going straight   \n",
       "1            Owner                 5-10yrs  ...   Going straight   \n",
       "2            Owner                     NaN  ...   Going straight   \n",
       "3     Governmental                     NaN  ...   Going straight   \n",
       "4            Owner                 5-10yrs  ...   Going straight   \n",
       "\n",
       "    Casualty_class Sex_of_casualty Age_band_of_casualty Casualty_severity  \\\n",
       "0               na              na                   na                na   \n",
       "1               na              na                   na                na   \n",
       "2  Driver or rider            Male                31-50                 3   \n",
       "3       Pedestrian          Female                18-30                 3   \n",
       "4               na              na                   na                na   \n",
       "\n",
       "  Work_of_casuality Fitness_of_casuality Pedestrian_movement  \\\n",
       "0               NaN                  NaN    Not a Pedestrian   \n",
       "1               NaN                  NaN    Not a Pedestrian   \n",
       "2            Driver                  NaN    Not a Pedestrian   \n",
       "3            Driver               Normal    Not a Pedestrian   \n",
       "4               NaN                  NaN    Not a Pedestrian   \n",
       "\n",
       "            Cause_of_accident Accident_severity  \n",
       "0             Moving Backward     Slight Injury  \n",
       "1                  Overtaking     Slight Injury  \n",
       "2   Changing lane to the left    Serious Injury  \n",
       "3  Changing lane to the right     Slight Injury  \n",
       "4                  Overtaking     Slight Injury  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show top 5 records\n",
    "ddata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d9e362e2-a326-4ca1-ba74-3a56eb514d9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12316, 32)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the total number of rows and columns\n",
    "ddata.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a3f6cdb7-066f-46db-803d-93411065834a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12316 entries, 0 to 12315\n",
      "Data columns (total 32 columns):\n",
      " #   Column                       Non-Null Count  Dtype \n",
      "---  ------                       --------------  ----- \n",
      " 0   Time                         12316 non-null  object\n",
      " 1   Day_of_week                  12316 non-null  object\n",
      " 2   Age_band_of_driver           12316 non-null  object\n",
      " 3   Sex_of_driver                12316 non-null  object\n",
      " 4   Educational_level            11575 non-null  object\n",
      " 5   Vehicle_driver_relation      11737 non-null  object\n",
      " 6   Driving_experience           11487 non-null  object\n",
      " 7   Type_of_vehicle              11366 non-null  object\n",
      " 8   Owner_of_vehicle             11834 non-null  object\n",
      " 9   Service_year_of_vehicle      8388 non-null   object\n",
      " 10  Defect_of_vehicle            7889 non-null   object\n",
      " 11  Area_accident_occured        12077 non-null  object\n",
      " 12  Lanes_or_Medians             11931 non-null  object\n",
      " 13  Road_allignment              12174 non-null  object\n",
      " 14  Types_of_Junction            11429 non-null  object\n",
      " 15  Road_surface_type            12144 non-null  object\n",
      " 16  Road_surface_conditions      12316 non-null  object\n",
      " 17  Light_conditions             12316 non-null  object\n",
      " 18  Weather_conditions           12316 non-null  object\n",
      " 19  Type_of_collision            12161 non-null  object\n",
      " 20  Number_of_vehicles_involved  12316 non-null  int64 \n",
      " 21  Number_of_casualties         12316 non-null  int64 \n",
      " 22  Vehicle_movement             12008 non-null  object\n",
      " 23  Casualty_class               12316 non-null  object\n",
      " 24  Sex_of_casualty              12316 non-null  object\n",
      " 25  Age_band_of_casualty         12316 non-null  object\n",
      " 26  Casualty_severity            12316 non-null  object\n",
      " 27  Work_of_casuality            9118 non-null   object\n",
      " 28  Fitness_of_casuality         9681 non-null   object\n",
      " 29  Pedestrian_movement          12316 non-null  object\n",
      " 30  Cause_of_accident            12316 non-null  object\n",
      " 31  Accident_severity            12316 non-null  object\n",
      "dtypes: int64(2), object(30)\n",
      "memory usage: 3.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# print the dataset information\n",
    "ddata.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "39f31c68-cb05-4e6a-b06c-6f13a944691a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time                            0.00\n",
       "Day_of_week                     0.00\n",
       "Age_band_of_driver              0.00\n",
       "Sex_of_driver                   0.00\n",
       "Educational_level               7.41\n",
       "Vehicle_driver_relation         5.79\n",
       "Driving_experience              8.29\n",
       "Type_of_vehicle                 9.50\n",
       "Owner_of_vehicle                4.82\n",
       "Service_year_of_vehicle        39.28\n",
       "Defect_of_vehicle              44.27\n",
       "Area_accident_occured           2.39\n",
       "Lanes_or_Medians                3.85\n",
       "Road_allignment                 1.42\n",
       "Types_of_Junction               8.87\n",
       "Road_surface_type               1.72\n",
       "Road_surface_conditions         0.00\n",
       "Light_conditions                0.00\n",
       "Weather_conditions              0.00\n",
       "Type_of_collision               1.55\n",
       "Number_of_vehicles_involved     0.00\n",
       "Number_of_casualties            0.00\n",
       "Vehicle_movement                3.08\n",
       "Casualty_class                  0.00\n",
       "Sex_of_casualty                 0.00\n",
       "Age_band_of_casualty            0.00\n",
       "Casualty_severity               0.00\n",
       "Work_of_casuality              31.98\n",
       "Fitness_of_casuality           26.35\n",
       "Pedestrian_movement             0.00\n",
       "Cause_of_accident               0.00\n",
       "Accident_severity               0.00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check missing values in percentage\n",
    "ddata.isnull().sum()/100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "44592933-a619-472f-8033-9ed8d187e5ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ddata['Accident_severity'].value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e650b84f-59da-4a78-b3b7-1934f07a72c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Get count of each severity level\n",
    "slight = ddata[ddata['Accident_severity'] == 'Slight Injury']['Accident_severity'].count()\n",
    "serious = ddata[ddata['Accident_severity'] == 'Serious Injury']['Accident_severity'].count()\n",
    "fatal = ddata[ddata['Accident_severity'] == 'Fatal injury']['Accident_severity'].count()\n",
    "\n",
    "# Customize plot\n",
    "x = [1, 2, 3]\n",
    "labels = ['Slight Injury', 'Serious Injury', 'Fatal Injury']\n",
    "y = [slight, serious, fatal]\n",
    "color_code = ['#FF6347', '#4169E1', '#32CD32']\n",
    "\n",
    "# Plot the bar chart\n",
    "plt.bar(x, y, color= color_code)\n",
    "\n",
    "# Customize the plot\n",
    "plt.xlabel('Accident Severity')\n",
    "plt.ylabel('Counts')\n",
    "plt.title('Distributions of Accident Severity')\n",
    "plt.xticks(x, labels)\n",
    "\n",
    "# Create legend\n",
    "legend_unique = [plt.Line2D([0], [0], marker='s', color='w', markerfacecolor=color, label=label) \n",
    "                 for label, color in zip(labels, color_code)]\n",
    "plt.legend(handles=legend_unique)\n",
    "\n",
    "# Save the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e180d8ec-c48d-4f5e-80ab-b6171954dd8e",
   "metadata": {},
   "source": [
    "Note:  The above chart shows imbalance multiclass label on the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "60ebe3ea-3ebc-4999-b396-b697ca797241",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the bar chart of road_surface_type and accident severity feature\n",
    "plt.figure(figsize=(6,5))\n",
    "sns.countplot(x='Road_surface_type', hue='Accident_severity', data=ddata)\n",
    "plt.xlabel('Rode surafce type')\n",
    "plt.xticks(rotation=60)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5a662b6f-38ac-47cf-ae27-114364f83fb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Age_band_of_driver</th>\n",
       "      <th>Sex_of_driver</th>\n",
       "      <th>Educational_level</th>\n",
       "      <th>Vehicle_driver_relation</th>\n",
       "      <th>Driving_experience</th>\n",
       "      <th>Type_of_vehicle</th>\n",
       "      <th>Owner_of_vehicle</th>\n",
       "      <th>Service_year_of_vehicle</th>\n",
       "      <th>Defect_of_vehicle</th>\n",
       "      <th>...</th>\n",
       "      <th>Casualty_class</th>\n",
       "      <th>Sex_of_casualty</th>\n",
       "      <th>Age_band_of_casualty</th>\n",
       "      <th>Casualty_severity</th>\n",
       "      <th>Work_of_casuality</th>\n",
       "      <th>Fitness_of_casuality</th>\n",
       "      <th>Pedestrian_movement</th>\n",
       "      <th>Cause_of_accident</th>\n",
       "      <th>Accident_severity</th>\n",
       "      <th>Hour_of_Day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Monday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Above high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>1-2yr</td>\n",
       "      <td>Automobile</td>\n",
       "      <td>Owner</td>\n",
       "      <td>Above 10yr</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Moving Backward</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Monday</td>\n",
       "      <td>31-50</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>Above 10yr</td>\n",
       "      <td>Public (&gt; 45 seats)</td>\n",
       "      <td>Owner</td>\n",
       "      <td>5-10yrs</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Overtaking</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>1-2yr</td>\n",
       "      <td>Lorry (41?100Q)</td>\n",
       "      <td>Owner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>Driver or rider</td>\n",
       "      <td>Male</td>\n",
       "      <td>31-50</td>\n",
       "      <td>3</td>\n",
       "      <td>Driver</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Changing lane to the left</td>\n",
       "      <td>Serious Injury</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>5-10yr</td>\n",
       "      <td>Public (&gt; 45 seats)</td>\n",
       "      <td>Governmental</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>Pedestrian</td>\n",
       "      <td>Female</td>\n",
       "      <td>18-30</td>\n",
       "      <td>3</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Changing lane to the right</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>2-5yr</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Owner</td>\n",
       "      <td>5-10yrs</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Overtaking</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Day_of_week Age_band_of_driver Sex_of_driver   Educational_level  \\\n",
       "0      Monday              18-30          Male   Above high school   \n",
       "1      Monday              31-50          Male  Junior high school   \n",
       "2      Monday              18-30          Male  Junior high school   \n",
       "3      Sunday              18-30          Male  Junior high school   \n",
       "4      Sunday              18-30          Male  Junior high school   \n",
       "\n",
       "  Vehicle_driver_relation Driving_experience      Type_of_vehicle  \\\n",
       "0                Employee              1-2yr           Automobile   \n",
       "1                Employee         Above 10yr  Public (> 45 seats)   \n",
       "2                Employee              1-2yr      Lorry (41?100Q)   \n",
       "3                Employee             5-10yr  Public (> 45 seats)   \n",
       "4                Employee              2-5yr                  NaN   \n",
       "\n",
       "  Owner_of_vehicle Service_year_of_vehicle Defect_of_vehicle  ...  \\\n",
       "0            Owner              Above 10yr         No defect  ...   \n",
       "1            Owner                 5-10yrs         No defect  ...   \n",
       "2            Owner                     NaN         No defect  ...   \n",
       "3     Governmental                     NaN         No defect  ...   \n",
       "4            Owner                 5-10yrs         No defect  ...   \n",
       "\n",
       "    Casualty_class Sex_of_casualty Age_band_of_casualty Casualty_severity  \\\n",
       "0               na              na                   na                na   \n",
       "1               na              na                   na                na   \n",
       "2  Driver or rider            Male                31-50                 3   \n",
       "3       Pedestrian          Female                18-30                 3   \n",
       "4               na              na                   na                na   \n",
       "\n",
       "  Work_of_casuality Fitness_of_casuality Pedestrian_movement  \\\n",
       "0               NaN                  NaN    Not a Pedestrian   \n",
       "1               NaN                  NaN    Not a Pedestrian   \n",
       "2            Driver                  NaN    Not a Pedestrian   \n",
       "3            Driver               Normal    Not a Pedestrian   \n",
       "4               NaN                  NaN    Not a Pedestrian   \n",
       "\n",
       "            Cause_of_accident Accident_severity  Hour_of_Day  \n",
       "0             Moving Backward     Slight Injury           17  \n",
       "1                  Overtaking     Slight Injury           17  \n",
       "2   Changing lane to the left    Serious Injury           17  \n",
       "3  Changing lane to the right     Slight Injury            1  \n",
       "4                  Overtaking     Slight Injury            1  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert the Time type column into pandas datetime\n",
    "ddata['Time'] = pd.to_datetime(ddata['Time'])\n",
    "\n",
    "# Extrating 'Hour_of_Day' feature from the Time column\n",
    "new_ddata = ddata.copy()\n",
    "new_ddata['Hour_of_Day'] = new_ddata['Time'].dt.hour\n",
    "ddata_new = new_ddata.drop('Time', axis=1)\n",
    "ddata_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6d2fadce-32d3-493a-aabc-e326b481b4eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fill missing values using the function\n",
    "def fill_missing_values(ddata):\n",
    "    # Loop over each column in the dataframe\n",
    "    for col in ddata.columns:\n",
    "        if ddata[col].dtype == 'float64' or ddata[col].dtype == 'int64': # Check if column is numeric\n",
    "            # Fill missing values with mean\n",
    "            ddata[col].fillna(ddata[col].mean(), inplace=True)\n",
    "        else:\n",
    "            # Fill missing values with mode\n",
    "            ddata[col].fillna(ddata[col].mode()[0], inplace=True)\n",
    "    return ddata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d548d11a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Age_band_of_driver</th>\n",
       "      <th>Sex_of_driver</th>\n",
       "      <th>Educational_level</th>\n",
       "      <th>Vehicle_driver_relation</th>\n",
       "      <th>Driving_experience</th>\n",
       "      <th>Type_of_vehicle</th>\n",
       "      <th>Owner_of_vehicle</th>\n",
       "      <th>Service_year_of_vehicle</th>\n",
       "      <th>Defect_of_vehicle</th>\n",
       "      <th>...</th>\n",
       "      <th>Casualty_class</th>\n",
       "      <th>Sex_of_casualty</th>\n",
       "      <th>Age_band_of_casualty</th>\n",
       "      <th>Casualty_severity</th>\n",
       "      <th>Work_of_casuality</th>\n",
       "      <th>Fitness_of_casuality</th>\n",
       "      <th>Pedestrian_movement</th>\n",
       "      <th>Cause_of_accident</th>\n",
       "      <th>Accident_severity</th>\n",
       "      <th>Hour_of_Day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Monday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Above high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>1-2yr</td>\n",
       "      <td>Automobile</td>\n",
       "      <td>Owner</td>\n",
       "      <td>Above 10yr</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Moving Backward</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Monday</td>\n",
       "      <td>31-50</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>Above 10yr</td>\n",
       "      <td>Public (&gt; 45 seats)</td>\n",
       "      <td>Owner</td>\n",
       "      <td>5-10yrs</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Overtaking</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>1-2yr</td>\n",
       "      <td>Lorry (41?100Q)</td>\n",
       "      <td>Owner</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>Driver or rider</td>\n",
       "      <td>Male</td>\n",
       "      <td>31-50</td>\n",
       "      <td>3</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Changing lane to the left</td>\n",
       "      <td>Serious Injury</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>5-10yr</td>\n",
       "      <td>Public (&gt; 45 seats)</td>\n",
       "      <td>Governmental</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>Pedestrian</td>\n",
       "      <td>Female</td>\n",
       "      <td>18-30</td>\n",
       "      <td>3</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Changing lane to the right</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>18-30</td>\n",
       "      <td>Male</td>\n",
       "      <td>Junior high school</td>\n",
       "      <td>Employee</td>\n",
       "      <td>2-5yr</td>\n",
       "      <td>Automobile</td>\n",
       "      <td>Owner</td>\n",
       "      <td>5-10yrs</td>\n",
       "      <td>No defect</td>\n",
       "      <td>...</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>na</td>\n",
       "      <td>Driver</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Not a Pedestrian</td>\n",
       "      <td>Overtaking</td>\n",
       "      <td>Slight Injury</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Day_of_week Age_band_of_driver Sex_of_driver   Educational_level  \\\n",
       "0      Monday              18-30          Male   Above high school   \n",
       "1      Monday              31-50          Male  Junior high school   \n",
       "2      Monday              18-30          Male  Junior high school   \n",
       "3      Sunday              18-30          Male  Junior high school   \n",
       "4      Sunday              18-30          Male  Junior high school   \n",
       "\n",
       "  Vehicle_driver_relation Driving_experience      Type_of_vehicle  \\\n",
       "0                Employee              1-2yr           Automobile   \n",
       "1                Employee         Above 10yr  Public (> 45 seats)   \n",
       "2                Employee              1-2yr      Lorry (41?100Q)   \n",
       "3                Employee             5-10yr  Public (> 45 seats)   \n",
       "4                Employee              2-5yr           Automobile   \n",
       "\n",
       "  Owner_of_vehicle Service_year_of_vehicle Defect_of_vehicle  ...  \\\n",
       "0            Owner              Above 10yr         No defect  ...   \n",
       "1            Owner                 5-10yrs         No defect  ...   \n",
       "2            Owner                 Unknown         No defect  ...   \n",
       "3     Governmental                 Unknown         No defect  ...   \n",
       "4            Owner                 5-10yrs         No defect  ...   \n",
       "\n",
       "    Casualty_class Sex_of_casualty Age_band_of_casualty Casualty_severity  \\\n",
       "0               na              na                   na                na   \n",
       "1               na              na                   na                na   \n",
       "2  Driver or rider            Male                31-50                 3   \n",
       "3       Pedestrian          Female                18-30                 3   \n",
       "4               na              na                   na                na   \n",
       "\n",
       "  Work_of_casuality Fitness_of_casuality Pedestrian_movement  \\\n",
       "0            Driver               Normal    Not a Pedestrian   \n",
       "1            Driver               Normal    Not a Pedestrian   \n",
       "2            Driver               Normal    Not a Pedestrian   \n",
       "3            Driver               Normal    Not a Pedestrian   \n",
       "4            Driver               Normal    Not a Pedestrian   \n",
       "\n",
       "            Cause_of_accident Accident_severity  Hour_of_Day  \n",
       "0             Moving Backward     Slight Injury           17  \n",
       "1                  Overtaking     Slight Injury           17  \n",
       "2   Changing lane to the left    Serious Injury           17  \n",
       "3  Changing lane to the right     Slight Injury            1  \n",
       "4                  Overtaking     Slight Injury            1  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ddata_new = fill_missing_values(ddata_new)\n",
    "ddata_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0c819ddf-7475-4386-95b3-b1d4eee3f9f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Day_of_week                    0\n",
       "Age_band_of_driver             0\n",
       "Sex_of_driver                  0\n",
       "Educational_level              0\n",
       "Vehicle_driver_relation        0\n",
       "Driving_experience             0\n",
       "Type_of_vehicle                0\n",
       "Owner_of_vehicle               0\n",
       "Service_year_of_vehicle        0\n",
       "Defect_of_vehicle              0\n",
       "Area_accident_occured          0\n",
       "Lanes_or_Medians               0\n",
       "Road_allignment                0\n",
       "Types_of_Junction              0\n",
       "Road_surface_type              0\n",
       "Road_surface_conditions        0\n",
       "Light_conditions               0\n",
       "Weather_conditions             0\n",
       "Type_of_collision              0\n",
       "Number_of_vehicles_involved    0\n",
       "Number_of_casualties           0\n",
       "Vehicle_movement               0\n",
       "Casualty_class                 0\n",
       "Sex_of_casualty                0\n",
       "Age_band_of_casualty           0\n",
       "Casualty_severity              0\n",
       "Work_of_casuality              0\n",
       "Fitness_of_casuality           0\n",
       "Pedestrian_movement            0\n",
       "Cause_of_accident              0\n",
       "Accident_severity              0\n",
       "Hour_of_Day                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check null values\n",
    "ddata_new.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1625207f-67af-4fdd-80b2-28d4eee23283",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "def label_encode_features(ddata):\n",
    "    le = LabelEncoder() # create a label encoder object\n",
    "    \n",
    "    for col in ddata.columns:\n",
    "        if ddata[col].dtype == 'object': # check if column is of type 'object'\n",
    "            ddata[col] = le.fit_transform(ddata[col].astype(str)) # label encode the column\n",
    "            \n",
    "    return ddata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4d489fbd-4ab9-469b-924d-0e2ee7faf084",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Label encode the object-type features using the function\n",
    "new_ddata = label_encode_features(new_ddata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "312cdb5d-3031-4db6-82c6-9ba7108f5e45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Age_band_of_driver</th>\n",
       "      <th>Sex_of_driver</th>\n",
       "      <th>Educational_level</th>\n",
       "      <th>Vehicle_driver_relation</th>\n",
       "      <th>Driving_experience</th>\n",
       "      <th>Type_of_vehicle</th>\n",
       "      <th>Owner_of_vehicle</th>\n",
       "      <th>Service_year_of_vehicle</th>\n",
       "      <th>...</th>\n",
       "      <th>Casualty_class</th>\n",
       "      <th>Sex_of_casualty</th>\n",
       "      <th>Age_band_of_casualty</th>\n",
       "      <th>Casualty_severity</th>\n",
       "      <th>Work_of_casuality</th>\n",
       "      <th>Fitness_of_casuality</th>\n",
       "      <th>Pedestrian_movement</th>\n",
       "      <th>Cause_of_accident</th>\n",
       "      <th>Accident_severity</th>\n",
       "      <th>Hour_of_Day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-08-31 17:02:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-08-31 17:02:00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-08-31 17:02:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-08-31 01:06:00</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-08-31 01:06:00</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Time  Day_of_week  Age_band_of_driver  Sex_of_driver  \\\n",
       "0 2023-08-31 17:02:00            1                   0              1   \n",
       "1 2023-08-31 17:02:00            1                   1              1   \n",
       "2 2023-08-31 17:02:00            1                   0              1   \n",
       "3 2023-08-31 01:06:00            3                   0              1   \n",
       "4 2023-08-31 01:06:00            3                   0              1   \n",
       "\n",
       "   Educational_level  Vehicle_driver_relation  Driving_experience  \\\n",
       "0                  0                        0                   0   \n",
       "1                  4                        0                   3   \n",
       "2                  4                        0                   0   \n",
       "3                  4                        0                   2   \n",
       "4                  4                        0                   1   \n",
       "\n",
       "   Type_of_vehicle  Owner_of_vehicle  Service_year_of_vehicle  ...  \\\n",
       "0                0                 3                        3  ...   \n",
       "1               11                 3                        2  ...   \n",
       "2                5                 3                        6  ...   \n",
       "3               11                 0                        6  ...   \n",
       "4               17                 3                        2  ...   \n",
       "\n",
       "   Casualty_class  Sex_of_casualty  Age_band_of_casualty  Casualty_severity  \\\n",
       "0               3                2                     5                  3   \n",
       "1               3                2                     5                  3   \n",
       "2               0                1                     1                  2   \n",
       "3               2                0                     0                  2   \n",
       "4               3                2                     5                  3   \n",
       "\n",
       "   Work_of_casuality  Fitness_of_casuality  Pedestrian_movement  \\\n",
       "0                  7                     5                    5   \n",
       "1                  7                     5                    5   \n",
       "2                  0                     5                    5   \n",
       "3                  0                     2                    5   \n",
       "4                  7                     5                    5   \n",
       "\n",
       "   Cause_of_accident  Accident_severity  Hour_of_Day  \n",
       "0                  9                  2           17  \n",
       "1                 16                  2           17  \n",
       "2                  0                  1           17  \n",
       "3                  1                  2            1  \n",
       "4                 16                  2            1  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_ddata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "74c93e17-bbd6-4ec0-810e-096dfaa5f641",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting data into features and target\n",
    "X = new_ddata.drop(['Accident_severity', 'Time'], axis=1)\n",
    "y = new_ddata['Accident_severity']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "46769ef1-7c8e-4033-9250-ea3acb513c8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Day_of_week</th>\n",
       "      <th>Age_band_of_driver</th>\n",
       "      <th>Sex_of_driver</th>\n",
       "      <th>Educational_level</th>\n",
       "      <th>Vehicle_driver_relation</th>\n",
       "      <th>Driving_experience</th>\n",
       "      <th>Type_of_vehicle</th>\n",
       "      <th>Owner_of_vehicle</th>\n",
       "      <th>Service_year_of_vehicle</th>\n",
       "      <th>Defect_of_vehicle</th>\n",
       "      <th>...</th>\n",
       "      <th>Vehicle_movement</th>\n",
       "      <th>Casualty_class</th>\n",
       "      <th>Sex_of_casualty</th>\n",
       "      <th>Age_band_of_casualty</th>\n",
       "      <th>Casualty_severity</th>\n",
       "      <th>Work_of_casuality</th>\n",
       "      <th>Fitness_of_casuality</th>\n",
       "      <th>Pedestrian_movement</th>\n",
       "      <th>Cause_of_accident</th>\n",
       "      <th>Hour_of_Day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12311</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12312</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12313</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12314</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12315</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12316 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Day_of_week  Age_band_of_driver  Sex_of_driver  Educational_level  \\\n",
       "0                1                   0              1                  0   \n",
       "1                1                   1              1                  4   \n",
       "2                1                   0              1                  4   \n",
       "3                3                   0              1                  4   \n",
       "4                3                   0              1                  4   \n",
       "...            ...                 ...            ...                ...   \n",
       "12311            6                   1              1                  7   \n",
       "12312            3                   4              1                  1   \n",
       "12313            3                   2              1                  4   \n",
       "12314            3                   0              0                  4   \n",
       "12315            3                   0              1                  4   \n",
       "\n",
       "       Vehicle_driver_relation  Driving_experience  Type_of_vehicle  \\\n",
       "0                            0                   0                0   \n",
       "1                            0                   3               11   \n",
       "2                            0                   0                5   \n",
       "3                            0                   2               11   \n",
       "4                            0                   1               17   \n",
       "...                        ...                 ...              ...   \n",
       "12311                        0                   1                4   \n",
       "12312                        0                   2                0   \n",
       "12313                        0                   2                1   \n",
       "12314                        0                   3                5   \n",
       "12315                        0                   2                7   \n",
       "\n",
       "       Owner_of_vehicle  Service_year_of_vehicle  Defect_of_vehicle  ...  \\\n",
       "0                     3                        3                  2  ...   \n",
       "1                     3                        2                  2  ...   \n",
       "2                     3                        6                  2  ...   \n",
       "3                     0                        6                  2  ...   \n",
       "4                     3                        2                  2  ...   \n",
       "...                 ...                      ...                ...  ...   \n",
       "12311                 3                        6                  2  ...   \n",
       "12312                 3                        6                  2  ...   \n",
       "12313                 3                        1                  2  ...   \n",
       "12314                 3                        1                  2  ...   \n",
       "12315                 3                        1                  2  ...   \n",
       "\n",
       "       Vehicle_movement  Casualty_class  Sex_of_casualty  \\\n",
       "0                     2               3                2   \n",
       "1                     2               3                2   \n",
       "2                     2               0                1   \n",
       "3                     2               2                0   \n",
       "4                     2               3                2   \n",
       "...                 ...             ...              ...   \n",
       "12311                 2               3                2   \n",
       "12312                 4               3                2   \n",
       "12313                 4               0                1   \n",
       "12314                 4               3                2   \n",
       "12315                 8               2                0   \n",
       "\n",
       "       Age_band_of_casualty  Casualty_severity  Work_of_casuality  \\\n",
       "0                         5                  3                  7   \n",
       "1                         5                  3                  7   \n",
       "2                         1                  2                  0   \n",
       "3                         0                  2                  0   \n",
       "4                         5                  3                  7   \n",
       "...                     ...                ...                ...   \n",
       "12311                     5                  3                  0   \n",
       "12312                     5                  3                  0   \n",
       "12313                     1                  2                  0   \n",
       "12314                     5                  3                  0   \n",
       "12315                     2                  2                  0   \n",
       "\n",
       "       Fitness_of_casuality  Pedestrian_movement  Cause_of_accident  \\\n",
       "0                         5                    5                  9   \n",
       "1                         5                    5                 16   \n",
       "2                         5                    5                  0   \n",
       "3                         2                    5                  1   \n",
       "4                         5                    5                 16   \n",
       "...                     ...                  ...                ...   \n",
       "12311                     2                    5                 10   \n",
       "12312                     2                    5                 10   \n",
       "12313                     2                    5                  1   \n",
       "12314                     2                    5                  5   \n",
       "12315                     2                    1                  1   \n",
       "\n",
       "       Hour_of_Day  \n",
       "0               17  \n",
       "1               17  \n",
       "2               17  \n",
       "3                1  \n",
       "4                1  \n",
       "...            ...  \n",
       "12311           16  \n",
       "12312           18  \n",
       "12313           13  \n",
       "12314           13  \n",
       "12315           13  \n",
       "\n",
       "[12316 rows x 31 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "65f03547-7f86-44fd-9203-c5c30bf66876",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imblearn in c:\\users\\eniola\\anaconda3\\lib\\site-packages (0.0)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\eniola\\anaconda3\\lib\\site-packages (from imblearn) (0.11.0)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\eniola\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.3.2)\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in c:\\users\\eniola\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.0.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\eniola\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (2.2.0)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\eniola\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.22.0)\n",
      "Requirement already satisfied: scipy>=1.5.0 in c:\\users\\eniola\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.7.3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip available: 22.3.1 -> 23.2.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c9f1e2bd-522b-46a1-824a-448e9c600977",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from imblearn.pipeline import make_pipeline\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier,VotingClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a2e2bd79-3da0-4545-8b9d-73d457e19536",
   "metadata": {},
   "outputs": [],
   "source": [
    "le = LabelEncoder()\n",
    "y = le.fit_transform(y)\n",
    "sc = StandardScaler() # transform to a range of 0 - 1\n",
    "X = sc.fit_transform(X)\n",
    "\n",
    "#Train and test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "#use smote techniques to handle imbalance class\n",
    "smote = SMOTE(random_state=42)\n",
    "\n",
    "\n",
    "X_train_res, y_train_res = smote.fit_resample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fdbd552b-cfcc-4ba8-9a02-6d7b233773a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# modelling using random forest baseline\n",
    "rf = RandomForestClassifier(n_estimators=800, max_depth=20, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "02d1d90b-f17f-4881-8a05-804f51bcc628",
   "metadata": {},
   "outputs": [],
   "source": [
    "#train the model on X and y train\n",
    "rf.fit(X_train_res, y_train_res)\n",
    "\n",
    "# predicting on test data\n",
    "predics = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b4b98bf7-1e5d-46a5-aa2c-8c3ef703348b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x231bed39730>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "\n",
    "cm = confusion_matrix(y_test, predics)\n",
    "ConfusionMatrixDisplay(cm).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c8212fce-5d90-4c4c-8101-4ed25d8bdc7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.25      0.02      0.04        52\n",
      "           1       0.64      0.05      0.09       552\n",
      "           2       0.84      0.99      0.91      3091\n",
      "\n",
      "    accuracy                           0.84      3695\n",
      "   macro avg       0.58      0.35      0.35      3695\n",
      "weighted avg       0.80      0.84      0.78      3695\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# classification report on test dataset\n",
    "classif_re = classification_report(y_test,predics)\n",
    "print(classif_re)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec5ec12e-0537-40a7-b454-f2dbbde366df",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import tree\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import ConfusionMatrixDisplay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "84bde503-cf9b-4f55-a0f6-17305c44756e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier(criterion='entropy')\n"
     ]
    }
   ],
   "source": [
    "decisionTree = DecisionTreeClassifier(criterion='entropy')\n",
    "print(decisionTree)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "34ff57d1-b44d-4134-bcd0-91347a6a24a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "dtc_model = decisionTree.fit(X_train_res, y_train_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "684778c9-8be6-4b37-8d9e-dc56f922c7c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "39c8bd49-4b9d-4795-9303-668d6ce60f85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.05417\n",
      "Feature: 1, Score: 0.05301\n",
      "Feature: 2, Score: 0.00258\n",
      "Feature: 3, Score: 0.02804\n",
      "Feature: 4, Score: 0.01448\n",
      "Feature: 5, Score: 0.08028\n",
      "Feature: 6, Score: 0.02965\n",
      "Feature: 7, Score: 0.00794\n",
      "Feature: 8, Score: 0.03332\n",
      "Feature: 9, Score: 0.01621\n",
      "Feature: 10, Score: 0.03954\n",
      "Feature: 11, Score: 0.04162\n",
      "Feature: 12, Score: 0.01530\n",
      "Feature: 13, Score: 0.02639\n",
      "Feature: 14, Score: 0.00200\n",
      "Feature: 15, Score: 0.00521\n",
      "Feature: 16, Score: 0.01025\n",
      "Feature: 17, Score: 0.01175\n",
      "Feature: 18, Score: 0.01451\n",
      "Feature: 19, Score: 0.11682\n",
      "Feature: 20, Score: 0.13832\n",
      "Feature: 21, Score: 0.02418\n",
      "Feature: 22, Score: 0.01074\n",
      "Feature: 23, Score: 0.00736\n",
      "Feature: 24, Score: 0.02230\n",
      "Feature: 25, Score: 0.00294\n",
      "Feature: 26, Score: 0.05234\n",
      "Feature: 27, Score: 0.01375\n",
      "Feature: 28, Score: 0.02111\n",
      "Feature: 29, Score: 0.05292\n",
      "Feature: 30, Score: 0.05097\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# feature importance\n",
    "\n",
    "importance = dtc_model.feature_importances_\n",
    "for i,v in enumerate(importance):\n",
    " print('Feature: %0d, Score: %.5f' % (i,v))\n",
    "\n",
    "# Barchat for feature importance\n",
    "\n",
    "pyplot.bar([x for x in range(len(importance))], importance)\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "36ef701c-02d6-48e8-b8da-837e52a4f476",
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction = dtc_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cebbbe94-7a98-45cd-a54e-628c0624c5d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x231b7de14c0>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, prediction)\n",
    "ConfusionMatrixDisplay(cm).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "208707b5-7d7f-4298-b9c2-c3175cdb7ac0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.13      0.19      0.16        52\n",
      "           1       0.23      0.25      0.24       552\n",
      "           2       0.85      0.84      0.85      3091\n",
      "\n",
      "    accuracy                           0.74      3695\n",
      "   macro avg       0.41      0.43      0.41      3695\n",
      "weighted avg       0.75      0.74      0.75      3695\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efb74663-55ac-4004-adf2-e88962d080bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
